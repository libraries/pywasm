import typing

unreachable = 0x00
nop = 0x01
block = 0x02
loop = 0x03
if_then = 0x04
else_fi = 0x05
end = 0x0b
br = 0x0c
br_if = 0x0d
br_table = 0x0e
return_call = 0x0f
call = 0x10
call_indirect = 0x11
drop = 0x1a
select = 0x1b
local_get = 0x20
local_set = 0x21
local_tee = 0x22
global_get = 0x23
global_set = 0x24
i32_load = 0x28
i64_load = 0x29
f32_load = 0x2a
f64_load = 0x2b
i32_load8_s = 0x2c
i32_load8_u = 0x2d
i32_load16_s = 0x2e
i32_load16_u = 0x2f
i64_load8_s = 0x30
i64_load8_u = 0x31
i64_load16_s = 0x32
i64_load16_u = 0x33
i64_load32_s = 0x34
i64_load32_u = 0x35
i32_store = 0x36
i64_store = 0x37
f32_store = 0x38
f64_store = 0x39
i32_store8 = 0x3a
i32_store16 = 0x3b
i64_store8 = 0x3c
i64_store16 = 0x3d
i64_store32 = 0x3e
memory_size = 0x3f
memory_grow = 0x40
i32_const = 0x41
i64_const = 0x42
f32_const = 0x43
f64_const = 0x44
i32_eqz = 0x45
i32_eq = 0x46
i32_ne = 0x47
i32_lt_s = 0x48
i32_lt_u = 0x49
i32_gt_s = 0x4a
i32_gt_u = 0x4b
i32_le_s = 0x4c
i32_le_u = 0x4d
i32_ge_s = 0x4e
i32_ge_u = 0x4f
i64_eqz = 0x50
i64_eq = 0x51
i64_ne = 0x52
i64_lt_s = 0x53
i64_lt_u = 0x54
i64_gt_s = 0x55
i64_gt_u = 0x56
i64_le_s = 0x57
i64_le_u = 0x58
i64_ge_s = 0x59
i64_ge_u = 0x5a
f32_eq = 0x5b
f32_ne = 0x5c
f32_lt = 0x5d
f32_gt = 0x5e
f32_le = 0x5f
f32_ge = 0x60
f64_eq = 0x61
f64_ne = 0x62
f64_lt = 0x63
f64_gt = 0x64
f64_le = 0x65
f64_ge = 0x66
i32_clz = 0x67
i32_ctz = 0x68
i32_popcnt = 0x69
i32_add = 0x6a
i32_sub = 0x6b
i32_mul = 0x6c
i32_div_s = 0x6d
i32_div_u = 0x6e
i32_rem_s = 0x6f
i32_rem_u = 0x70
i32_and = 0x71
i32_or = 0x72
i32_xor = 0x73
i32_shl = 0x74
i32_shr_s = 0x75
i32_shr_u = 0x76
i32_rotl = 0x77
i32_rotr = 0x78
i64_clz = 0x79
i64_ctz = 0x7a
i64_popcnt = 0x7b
i64_add = 0x7c
i64_sub = 0x7d
i64_mul = 0x7e
i64_div_s = 0x7f
i64_div_u = 0x80
i64_rem_s = 0x81
i64_rem_u = 0x82
i64_and = 0x83
i64_or = 0x84
i64_xor = 0x85
i64_shl = 0x86
i64_shr_s = 0x87
i64_shr_u = 0x88
i64_rotl = 0x89
i64_rotr = 0x8a
f32_abs = 0x8b
f32_neg = 0x8c
f32_ceil = 0x8d
f32_floor = 0x8e
f32_trunc = 0x8f
f32_nearest = 0x90
f32_sqrt = 0x91
f32_add = 0x92
f32_sub = 0x93
f32_mul = 0x94
f32_div = 0x95
f32_min = 0x96
f32_max = 0x97
f32_copysign = 0x98
f64_abs = 0x99
f64_neg = 0x9a
f64_ceil = 0x9b
f64_floor = 0x9c
f64_trunc = 0x9d
f64_nearest = 0x9e
f64_sqrt = 0x9f
f64_add = 0xa0
f64_sub = 0xa1
f64_mul = 0xa2
f64_div = 0xa3
f64_min = 0xa4
f64_max = 0xa5
f64_copysign = 0xa6
i32_wrap_i64 = 0xa7
i32_trunc_f32_s = 0xa8
i32_trunc_f32_u = 0xa9
i32_trunc_f64_s = 0xaa
i32_trunc_f64_u = 0xab
i64_extend_i32_s = 0xac
i64_extend_i32_u = 0xad
i64_trunc_f32_s = 0xae
i64_trunc_f32_u = 0xaf
i64_trunc_f64_s = 0xb0
i64_trunc_f64_u = 0xb1
f32_convert_i32_s = 0xb2
f32_convert_i32_u = 0xb3
f32_convert_i64_s = 0xb4
f32_convert_i64_u = 0xb5
f32_demote_f64 = 0xb6
f64_convert_i32_s = 0xb7
f64_convert_i32_u = 0xb8
f64_convert_i64_s = 0xb9
f64_convert_i64_u = 0xba
f64_promote_f32 = 0xbb
i32_reinterpret_f32 = 0xbc
i64_reinterpret_f64 = 0xbd
f32_reinterpret_i32 = 0xbe
f64_reinterpret_i64 = 0xbf

name: typing.Dict[int, str] = {}
name[unreachable] = 'unreachable'
name[nop] = 'nop'
name[block] = 'block'
name[loop] = 'loop'
name[if_then] = 'if'
name[else_fi] = 'else'
name[end] = 'end'
name[br] = 'br'
name[br_if] = 'br_if'
name[br_table] = 'br_table'
name[return_call] = 'return'
name[call] = 'call'
name[call_indirect] = 'call_indirect'
name[drop] = 'drop'
name[select] = 'select'
name[local_get] = 'local_get'
name[local_set] = 'local_set'
name[local_tee] = 'local_tee'
name[global_get] = 'global_get'
name[global_set] = 'global_set'
name[i32_load] = 'i32_load'
name[i64_load] = 'i64_load'
name[f32_load] = 'f32_load'
name[f64_load] = 'f64_load'
name[i32_load8_s] = 'i32_load8_s'
name[i32_load8_u] = 'i32_load8_u'
name[i32_load16_s] = 'i32_load16_s'
name[i32_load16_u] = 'i32_load16_u'
name[i64_load8_s] = 'i64_load8_s'
name[i64_load8_u] = 'i64_load8_u'
name[i64_load16_s] = 'i64_load16_s'
name[i64_load16_u] = 'i64_load16_u'
name[i64_load32_s] = 'i64_load32_s'
name[i64_load32_u] = 'i64_load32_u'
name[i32_store] = 'i32_store'
name[i64_store] = 'i64_store'
name[f32_store] = 'f32_store'
name[f64_store] = 'f64_store'
name[i32_store8] = 'i32_store8'
name[i32_store16] = 'i32_store16'
name[i64_store8] = 'i64_store8'
name[i64_store16] = 'i64_store16'
name[i64_store32] = 'i64_store32'
name[memory_size] = 'memory_size'
name[memory_grow] = 'memory_grow'
name[i32_const] = 'i32_const'
name[i64_const] = 'i64_const'
name[f32_const] = 'f32_const'
name[f64_const] = 'f64_const'
name[i32_eqz] = 'i32_eqz'
name[i32_eq] = 'i32_eq'
name[i32_ne] = 'i32_ne'
name[i32_lt_s] = 'i32_lt_s'
name[i32_lt_u] = 'i32_lt_u'
name[i32_gt_s] = 'i32_gt_s'
name[i32_gt_u] = 'i32_gt_u'
name[i32_le_s] = 'i32_le_s'
name[i32_le_u] = 'i32_le_u'
name[i32_ge_s] = 'i32_ge_s'
name[i32_ge_u] = 'i32_ge_u'
name[i64_eqz] = 'i64_eqz'
name[i64_eq] = 'i64_eq'
name[i64_ne] = 'i64_ne'
name[i64_lt_s] = 'i64_lt_s'
name[i64_lt_u] = 'i64_lt_u'
name[i64_gt_s] = 'i64_gt_s'
name[i64_gt_u] = 'i64_gt_u'
name[i64_le_s] = 'i64_le_s'
name[i64_le_u] = 'i64_le_u'
name[i64_ge_s] = 'i64_ge_s'
name[i64_ge_u] = 'i64_ge_u'
name[f32_eq] = 'f32_eq'
name[f32_ne] = 'f32_ne'
name[f32_lt] = 'f32_lt'
name[f32_gt] = 'f32_gt'
name[f32_le] = 'f32_le'
name[f32_ge] = 'f32_ge'
name[f64_eq] = 'f64_eq'
name[f64_ne] = 'f64_ne'
name[f64_lt] = 'f64_lt'
name[f64_gt] = 'f64_gt'
name[f64_le] = 'f64_le'
name[f64_ge] = 'f64_ge'
name[i32_clz] = 'i32_clz'
name[i32_ctz] = 'i32_ctz'
name[i32_popcnt] = 'i32_popcnt'
name[i32_add] = 'i32_add'
name[i32_sub] = 'i32_sub'
name[i32_mul] = 'i32_mul'
name[i32_div_s] = 'i32_div_s'
name[i32_div_u] = 'i32_div_u'
name[i32_rem_s] = 'i32_rem_s'
name[i32_rem_u] = 'i32_rem_u'
name[i32_and] = 'i32_and'
name[i32_or] = 'i32_or'
name[i32_xor] = 'i32_xor'
name[i32_shl] = 'i32_shl'
name[i32_shr_s] = 'i32_shr_s'
name[i32_shr_u] = 'i32_shr_u'
name[i32_rotl] = 'i32_rotl'
name[i32_rotr] = 'i32_rotr'
name[i64_clz] = 'i64_clz'
name[i64_ctz] = 'i64_ctz'
name[i64_popcnt] = 'i64_popcnt'
name[i64_add] = 'i64_add'
name[i64_sub] = 'i64_sub'
name[i64_mul] = 'i64_mul'
name[i64_div_s] = 'i64_div_s'
name[i64_div_u] = 'i64_div_u'
name[i64_rem_s] = 'i64_rem_s'
name[i64_rem_u] = 'i64_rem_u'
name[i64_and] = 'i64_and'
name[i64_or] = 'i64_or'
name[i64_xor] = 'i64_xor'
name[i64_shl] = 'i64_shl'
name[i64_shr_s] = 'i64_shr_s'
name[i64_shr_u] = 'i64_shr_u'
name[i64_rotl] = 'i64_rotl'
name[i64_rotr] = 'i64_rotr'
name[f32_abs] = 'f32_abs'
name[f32_neg] = 'f32_neg'
name[f32_ceil] = 'f32_ceil'
name[f32_floor] = 'f32_floor'
name[f32_trunc] = 'f32_trunc'
name[f32_nearest] = 'f32_nearest'
name[f32_sqrt] = 'f32_sqrt'
name[f32_add] = 'f32_add'
name[f32_sub] = 'f32_sub'
name[f32_mul] = 'f32_mul'
name[f32_div] = 'f32_div'
name[f32_min] = 'f32_min'
name[f32_max] = 'f32_max'
name[f32_copysign] = 'f32_copysign'
name[f64_abs] = 'f64_abs'
name[f64_neg] = 'f64_neg'
name[f64_ceil] = 'f64_ceil'
name[f64_floor] = 'f64_floor'
name[f64_trunc] = 'f64_trunc'
name[f64_nearest] = 'f64_nearest'
name[f64_sqrt] = 'f64_sqrt'
name[f64_add] = 'f64_add'
name[f64_sub] = 'f64_sub'
name[f64_mul] = 'f64_mul'
name[f64_div] = 'f64_div'
name[f64_min] = 'f64_min'
name[f64_max] = 'f64_max'
name[f64_copysign] = 'f64_copysign'
name[i32_wrap_i64] = 'i32_wrap_i64'
name[i32_trunc_f32_s] = 'i32_trunc_f32_s'
name[i32_trunc_f32_u] = 'i32_trunc_f32_u'
name[i32_trunc_f64_s] = 'i32_trunc_f64_s'
name[i32_trunc_f64_u] = 'i32_trunc_f64_u'
name[i64_extend_i32_s] = 'i64_extend_i32_s'
name[i64_extend_i32_u] = 'i64_extend_i32_u'
name[i64_trunc_f32_s] = 'i64_trunc_f32_s'
name[i64_trunc_f32_u] = 'i64_trunc_f32_u'
name[i64_trunc_f64_s] = 'i64_trunc_f64_s'
name[i64_trunc_f64_u] = 'i64_trunc_f64_u'
name[f32_convert_i32_s] = 'f32_convert_i32_s'
name[f32_convert_i32_u] = 'f32_convert_i32_u'
name[f32_convert_i64_s] = 'f32_convert_i64_s'
name[f32_convert_i64_u] = 'f32_convert_i64_u'
name[f32_demote_f64] = 'f32_demote_f64'
name[f64_convert_i32_s] = 'f64_convert_i32_s'
name[f64_convert_i32_u] = 'f64_convert_i32_u'
name[f64_convert_i64_s] = 'f64_convert_i64_s'
name[f64_convert_i64_u] = 'f64_convert_i64_u'
name[f64_promote_f32] = 'f64_promote_f32'
name[i32_reinterpret_f32] = 'i32_reinterpret_f32'
name[i64_reinterpret_f64] = 'i64_reinterpret_f64'
name[f32_reinterpret_i32] = 'f32_reinterpret_i32'
name[f64_reinterpret_i64] = 'f64_reinterpret_i64'
